import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import axios from "axios";
import { useState } from "react";

const initialState = {
  name: "",
  surname: "",
  email: "",
  dob: "",
  phone: "",
  timestamp: "",
};
export default function Home() {
  const [inputs, setInputs] = useState({
    ...initialState,
  });
  const [mask, updateMask] = useState(0);
  const [code, updateCode] = useState("");
  const [err, updateErr] = useState("");
  const formItems = [
    { type: "text", name: "name", text: "Name" },
    { type: "text", name: "surname", text: "Surname" },
    { type: "text", name: "email", text: "Email" },
    { type: "tel", name: "phone", text: "Phone Number" },
    { type: "date", name: "dob", text: "Date of Birth" },
  ];

  const handleSubmit = (e) => {
    e?.preventDefault();
    const payload = { data: { ...inputs, timestamp: +new Date() }, mask };
    const API =
      process.env.NODE_ENV === "development"
        ? "http://localhost:3000"
        : "https://qr-code-genetator-nextjs.vercel.app";
    axios
      .post(API + "/api/scan", payload)
      .then((response) => {
        updateCode(response.data);
      })
      .catch((err) => {
        updateErr(err.data);
      });
  };

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    event.persist();
    setInputs((inputs) => ({
      ...inputs,
      [name]: value,
    }));
  };

  const newPattern = (e) => {
    e?.preventDefault();
    updateMask((mask + 1) % 8);
    handleSubmit();
  };

  const onReset = (e) => {
    e?.preventDefault();
    updateMask(0);
    updateCode("");
    updateErr("");
    setInputs((inputs) => ({
      ...inputs,
      ...initialState,
    }));
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <form onSubmit={handleSubmit} className="qr-form">
          {formItems.map((item, index) => (
            <label className="form-label" key={index}>
              {item.text}:
              <input
                className="form-input"
                type={item.type}
                name={item.name}
                aria-label={item.name}
                value={inputs[item.name]}
                onChange={handleInputChange}
                required
              />
            </label>
          ))}
          <input type="submit" aria-label="submit" value="Get QR" />
        </form>
        {code && (
          <div>
            <button onClick={newPattern} className="form-newpattern">
              New pattern
            </button>
            <button onClick={onReset} className="form-newpattern">
              Reset
            </button>
          </div>
        )}
        {err && <p>{err}</p>}
        <img src={code} alt="" aria-label="code" />
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
